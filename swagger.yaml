swagger: '2.0'
info:
  description: 'A REST API used to identify cross-references from requirements. Requirements can be in a database, or in an html document-html. Cross-references are dependencies explicitly stated, either internal (between requirements of the same project), or external (between a requirement and an external source).'
  version: '1.0'
  title: Cross-reference detection RESTful API
  contact:
    name: UPC-GESSI (OPENReq)
    url: 'http://openreq.eu/'
  license:
    name: EPL-v1.0
    url: 'https://www.eclipse.org/legal/epl-v10.html'
host: 'https://api.openreq.eu/cross-reference-detection/'
basePath: /
tags:
  - name: grammar-controller
    description: Grammar Controller
  - name: Cross-reference detection Service
    description: API related to cross-reference detection
  - name: controller
    description: Controller
paths:
  /upc/cross-reference-detection/file:
    post:
      tags:
        - controller
      summary: Uploads a file and detects its dependencies
      description: 'Uploads one document in HTML format to the server, extracts the cross-references of all the requirements in the document and finally removes the uploaded file.'
      operationId: crossReferenceDetectorUsingPOST_1
      consumes:
        - multipart/form-data
      produces:
        - '*/*'
      parameters:
        - name: file
          in: formData
          description: The file to upload (HTML format)
          required: true
          type: file
        - name: company
          in: query
          description: Company
          required: false
          type: string
      responses:
        '0':
          description: 'Non content: There is no content to submit.'
        '200':
          description: 'OK: The request has succeeded.'
          schema:
            type: string
        '201':
          description: 'Created: The request has been fulfilled and has resulted in one or more new resources being created.'
          schema:
            type: string
        '401':
          description: 'Unauthorized: The request has not been applied because it lacks valid authentication credentials for the target resource.'
        '403':
          description: 'Forbidden: The server understood the request but refuses to authorize it.'
        '404':
          description: 'Not Found: The server could not find what was requested by the client.'
        '500':
          description: Internal Server Error. For more information see ‘message’ in the Response Body.
  '/upc/cross-reference-detection/file/{n}/{m}':
    post:
      tags:
        - controller
      summary: Uploads a file and detects the dependencies between N-M clause's indexes
      description: 'Uploads one document in HTML format to the server, extracts the cross-references of the requirements between N-M indexes in the document and finally removes the uploaded file.'
      operationId: crossReferenceDetectorUsingPOST
      consumes:
        - multipart/form-data
      produces:
        - '*/*'
      parameters:
        - name: file
          in: formData
          description: The file to upload (HTML fromat)
          required: true
          type: file
        - name: company
          in: query
          description: Company
          required: false
          type: string
        - name: 'n'
          in: path
          description: First index of the clause list that will be analysed (included)
          required: true
          type: string
        - name: m
          in: path
          description: Last index of the clause list that will be analysed (not included)
          required: true
          type: string
      responses:
        '0':
          description: 'Non content: There is no content to submit.'
        '200':
          description: 'OK: The request has succeeded.'
          schema:
            type: string
        '201':
          description: 'Created: The request has been fulfilled and has resulted in one or more new resources being created.'
          schema:
            type: string
        '401':
          description: 'Unauthorized: The request has not been applied because it lacks valid authentication credentials for the target resource.'
        '403':
          description: 'Forbidden: The server understood the request but refuses to authorize it.'
        '404':
          description: 'Not Found: The server could not find what was requested by the client.'
        '500':
          description: Internal Server Error. For more information see ‘message’ in the Response Body.
  /upc/cross-reference-detection/grammar:
    get:
      tags:
        - grammar-controller
      summary: Get grammar
      description: Gets the list of prefixes of a given company
      operationId: getGrammarUsingGET
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: company
          in: query
          description: Company
          required: true
          type: string
      responses:
        '0':
          description: 'Non content: There is no content to submit.'
        '200':
          description: 'OK: The request has succeeded.'
          schema:
            type: string
        '201':
          description: 'Created: The request has been fulfilled and has resulted in one or more new resources being created.'
          schema:
            type: string
        '401':
          description: 'Unauthorized: The request has not been applied because it lacks valid authentication credentials for the target resource.'
        '403':
          description: 'Forbidden: The server understood the request but refuses to authorize it.'
        '404':
          description: 'Not Found: The server could not find what was requested by the client.'
        '500':
          description: Internal Server Error. For more information see ‘message’ in the Response Body.
    post:
      tags:
        - grammar-controller
      summary: Store grammar
      description: 'Given a company, stores its list of prefixes to use as grammar rules to extract requirement cross-references'
      operationId: uploadGrammarUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: grammar
          description: The grammar
          required: true
          schema:
            $ref: '#/definitions/Grammar'
        - name: company
          in: query
          description: Company
          required: true
          type: string
      responses:
        '0':
          description: 'Non content: There is no content to submit.'
        '200':
          description: 'OK: The request has succeeded.'
          schema:
            type: string
        '201':
          description: 'Created: The request has been fulfilled and has resulted in one or more new resources being created.'
          schema:
            type: string
        '401':
          description: 'Unauthorized: The request has not been applied because it lacks valid authentication credentials for the target resource.'
        '403':
          description: 'Forbidden: The server understood the request but refuses to authorize it.'
        '404':
          description: 'Not Found: The server could not find what was requested by the client.'
        '500':
          description: Internal Server Error. For more information see ‘message’ in the Response Body.
    put:
      tags:
        - grammar-controller
      summary: Update grammar
      description: 'Given a company, updates its existing list of prefixes to use as grammar rules to extract requirement cross-references'
      operationId: updateGrammarUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: grammar
          description: The grammar
          required: true
          schema:
            $ref: '#/definitions/Grammar'
        - name: company
          in: query
          description: Company
          required: true
          type: string
      responses:
        '0':
          description: 'Non content: There is no content to submit.'
        '200':
          description: 'OK: The request has succeeded.'
          schema:
            type: string
        '201':
          description: 'Created: The request has been fulfilled and has resulted in one or more new resources being created.'
          schema:
            type: string
        '401':
          description: 'Unauthorized: The request has not been applied because it lacks valid authentication credentials for the target resource.'
        '403':
          description: 'Forbidden: The server understood the request but refuses to authorize it.'
        '404':
          description: 'Not Found: The server could not find what was requested by the client.'
        '500':
          description: Internal Server Error. For more information see ‘message’ in the Response Body.
    delete:
      tags:
        - grammar-controller
      summary: Delete grammar
      description: Deletes grammar rules of a given company
      operationId: deleteGrammarUsingDELETE
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: company
          in: query
          description: Company
          required: true
          type: string
      responses:
        '0':
          description: 'Non content: There is no content to submit.'
        '200':
          description: 'OK: The request has succeeded.'
          schema:
            type: string
        '201':
          description: 'Created: The request has been fulfilled and has resulted in one or more new resources being created.'
          schema:
            type: string
        '204':
          description: No Content
        '401':
          description: 'Unauthorized: The request has not been applied because it lacks valid authentication credentials for the target resource.'
        '403':
          description: 'Forbidden: The server understood the request but refuses to authorize it.'
        '404':
          description: 'Not Found: The server could not find what was requested by the client.'
        '500':
          description: Internal Server Error. For more information see ‘message’ in the Response Body.
  '/upc/cross-reference-detection/json/{projectId}':
    post:
      tags:
        - controller
      summary: Detects dependencies of the clauses stored in a JSON.
      description: Extracts the cross-references of all bugs and requirements of a project stored in an input JSON.
      operationId: crossReferenceDetectorJsonUsingPOST_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: json
          description: The json object to upload.
          required: true
          schema:
            type: string
        - name: company
          in: query
          description: Company
          required: false
          type: string
        - name: projectId
          in: path
          description: Id of the project where the requirements to analize are.
          required: true
          type: string
      responses:
        '0':
          description: 'Non content: There is no content to submit.'
        '200':
          description: 'OK: The request has succeeded.'
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: 'Unauthorized: The request has not been applied because it lacks valid authentication credentials for the target resource.'
        '403':
          description: 'Forbidden: The server understood the request but refuses to authorize it.'
        '404':
          description: 'Not Found: The server could not find what was requested by the client.'
        '500':
          description: Internal Server Error. For more information see ‘message’ in the Response Body.
  '/upc/cross-reference-detection/json/{projectId}/{n}/{m}':
    post:
      tags:
        - controller
      summary: Detects dependencies between N-M indexes of the clauses stored in a JSON.
      description: Extracts the cross-references between N-M indexes of all bugs and requirements of a project stored in an input JSON.
      operationId: crossReferenceDetectorJsonUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: json
          description: The json object to upload.
          required: true
          schema:
            type: string
        - name: company
          in: query
          description: Company
          required: false
          type: string
        - name: projectId
          in: path
          description: Id of the project where the requirements to analize are.
          required: true
          type: string
        - name: 'n'
          in: path
          description: First index of the requirement list that will be analysed (included)
          required: true
          type: string
        - name: m
          in: path
          description: Last index of the requirement list that will be analysed (not included)
          required: true
          type: string
      responses:
        '0':
          description: 'Non content: There is no content to submit.'
        '200':
          description: 'OK: The request has succeeded.'
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: 'Unauthorized: The request has not been applied because it lacks valid authentication credentials for the target resource.'
        '403':
          description: 'Forbidden: The server understood the request but refuses to authorize it.'
        '404':
          description: 'Not Found: The server could not find what was requested by the client.'
        '500':
          description: Internal Server Error. For more information see ‘message’ in the Response Body.
definitions:
  Grammar:
    type: object
    properties:
      prefixes:
        type: array
        items:
          type: string
